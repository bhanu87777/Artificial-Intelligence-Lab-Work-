goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the empty space

# Define the possible moves: up, down, left, right
moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # down, up, right, left

# Helper function to check if the current state is the goal state
def is_goal(state):
    return state == goal_state

# Helper function to get the position of the empty space (0)
def get_zero_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Helper function to create a new state by swapping tiles
def swap(state, pos1, pos2):
    new_state = [row[:] for row in state]  # Make a copy of the state
    new_state[pos1[0]][pos1[1]], new_state[pos2[0]][pos2[1]] = new_state[pos2[0]][pos2[1]], new_state[pos1[0]][pos1[1]]
    return new_state

# DFS algorithm to solve the 8-puzzle problem
def dfs(initial_state):
    # A set to keep track of visited states to avoid revisiting them
    visited = set()
    
    # A stack for DFS (stores state, parent)
    stack = [(initial_state, None)]  # The stack stores tuples (state, parent)
    
    # A dictionary to store the parent of each state for reconstructing the path
    parent_map = {}
    
    while stack:
        current_state, parent = stack.pop()
        
        # If the current state is the goal state, reconstruct the path and return it
        if is_goal(current_state):
            path = []
            while current_state:
                path.append(current_state)
                current_state = parent_map.get(tuple(map(tuple, current_state)))
            return path[::-1]  # Return the path from initial to goal state
        
        # Convert the current state to a tuple of tuples to use it as a key in a set/dict
        current_state_tuple = tuple(map(tuple, current_state))
        
        # If the current state has already been visited, skip it
        if current_state_tuple in visited:
            continue
        visited.add(current_state_tuple)
        
        # Get the position of the empty space (0)
        zero_x, zero_y = get_zero_position(current_state)
        
        # Explore all possible moves (up, down, left, right)
        for move_x, move_y in moves:
            new_x, new_y = zero_x + move_x, zero_y + move_y
            if 0 <= new_x < 3 and 0 <= new_y < 3:  # Make sure the move is within bounds
                new_state = swap(current_state, (zero_x, zero_y), (new_x, new_y))
                
                # Convert the new state to a tuple of tuples to store it
                new_state_tuple = tuple(map(tuple, new_state))
                
                # If the new state has not been visited, add it to the stack and update the parent map
                if new_state_tuple not in visited:
                    stack.append((new_state, current_state))
                    parent_map[new_state_tuple] = current_state
                    
    return None  # If no solution is found

# Helper function to print the state of the puzzle
def print_puzzle(state):
    for row in state:
        print(row)
    print()

# Example usage
if __name__ == "__main__":
    # Define the initial state (you can change this to test other configurations)
    initial_state = [[1, 2, 3],
                     [4, 0, 6],
                     [7, 5, 8]]
    
    print("Initial State:")
    print_puzzle(initial_state)
    
    solution = dfs(initial_state)
    
    if solution:
        print("Solution found! Steps:")
        for step in solution:
            print_puzzle(step)
    else:
        print("No solution found.")
        
